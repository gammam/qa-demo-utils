name: Check JIRA Ticket

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  jira-check:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v2


    - name: Set input for project acronyms
      id: set_acronyms
      env: 
        PROJECT_ACRONYMS="${{ env.PROJECT_ACRONYMS }}"
      run: |
        # Assume acronyms are passed in as a comma-separated input, e.g. "RTD,ABC,XYZ"
        PROJECT_ACRONYMS="${{ env.project_acronyms }}"
        # Convert the input into a regex pattern, e.g. "(RTD|ABC|XYZ)"
        PROJECT_ACRONYMS_REGEX=$(echo "$PROJECT_ACRONYMS" | sed 's/,/|/g')
        echo "PROJECT_ACRONYMS_REGEX=($PROJECT_ACRONYMS_REGEX)" >> $GITHUB_ENV

    - name: Extract JIRA ticket from branch name
      id: extract_ticket
      run: |
        echo "Current branch ${{ github.head_ref }}"
        BRANCH_NAME=${{ github.head_ref }}
        
        # Use regex to find the JIRA ticket pattern (e.g., RTD-123)
         if [[ "$BRANCH_NAME" =~ (${PROJECT_ACRONYMS_REGEX}-[0-9]+) ]]; then
          echo "JIRA_TICKET=${BASH_REMATCH[1]}" >> $GITHUB_ENV
          echo "Found JIRA ticket: ${BASH_REMATCH[1]}"
        else
          echo "No JIRA ticket found in branch name : $BRANCH_NAME "
          exit 1
        fi

    - name: Validate JIRA Ticket
      env:
        JIRA_BASE_URL: ${{ env.JIRA_BASE_URL }}
        JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        JIRA_TICKET: ${{ env.JIRA_TICKET }}
      run: |
        ISSUE_URL="$JIRA_BASE_URL/rest/api/3/issue/$JIRA_TICKET"
        RESPONSE=$(curl -s -u $JIRA_EMAIL:$JIRA_API_TOKEN -X GET $ISSUE_URL)
        
        if echo "$RESPONSE" | grep -q "errorMessages"; then
          echo "JIRA ticket $JIRA_TICKET not found"
          exit 1
        else
          echo "JIRA ticket $JIRA_TICKET found"
        fi
